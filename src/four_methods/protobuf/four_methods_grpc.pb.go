// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: protobuf/four_methods.proto

package four_methods_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DemoClient is the client API for Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoClient interface {
	// 单向调用
	UnaryRPC(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error)
	// 服务流模式
	ServerStreamRPC(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (Demo_ServerStreamRPCClient, error)
	// 客户端流模式
	ClientStreamRPC(ctx context.Context, opts ...grpc.CallOption) (Demo_ClientStreamRPCClient, error)
	// 双向流模式
	BiStreamRPC(ctx context.Context, opts ...grpc.CallOption) (Demo_BiStreamRPCClient, error)
}

type demoClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoClient(cc grpc.ClientConnInterface) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) UnaryRPC(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (*DemoResponse, error) {
	out := new(DemoResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Demo/UnaryRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) ServerStreamRPC(ctx context.Context, in *DemoRequest, opts ...grpc.CallOption) (Demo_ServerStreamRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[0], "/protobuf.Demo/ServerStreamRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoServerStreamRPCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Demo_ServerStreamRPCClient interface {
	Recv() (*DemoResponse, error)
	grpc.ClientStream
}

type demoServerStreamRPCClient struct {
	grpc.ClientStream
}

func (x *demoServerStreamRPCClient) Recv() (*DemoResponse, error) {
	m := new(DemoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoClient) ClientStreamRPC(ctx context.Context, opts ...grpc.CallOption) (Demo_ClientStreamRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[1], "/protobuf.Demo/ClientStreamRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoClientStreamRPCClient{stream}
	return x, nil
}

type Demo_ClientStreamRPCClient interface {
	Send(*DemoRequest) error
	CloseAndRecv() (*DemoResponse, error)
	grpc.ClientStream
}

type demoClientStreamRPCClient struct {
	grpc.ClientStream
}

func (x *demoClientStreamRPCClient) Send(m *DemoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoClientStreamRPCClient) CloseAndRecv() (*DemoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DemoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoClient) BiStreamRPC(ctx context.Context, opts ...grpc.CallOption) (Demo_BiStreamRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[2], "/protobuf.Demo/BiStreamRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoBiStreamRPCClient{stream}
	return x, nil
}

type Demo_BiStreamRPCClient interface {
	Send(*DemoRequest) error
	Recv() (*DemoResponse, error)
	grpc.ClientStream
}

type demoBiStreamRPCClient struct {
	grpc.ClientStream
}

func (x *demoBiStreamRPCClient) Send(m *DemoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoBiStreamRPCClient) Recv() (*DemoResponse, error) {
	m := new(DemoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoServer is the server API for Demo service.
// All implementations must embed UnimplementedDemoServer
// for forward compatibility
type DemoServer interface {
	// 单向调用
	UnaryRPC(context.Context, *DemoRequest) (*DemoResponse, error)
	// 服务流模式
	ServerStreamRPC(*DemoRequest, Demo_ServerStreamRPCServer) error
	// 客户端流模式
	ClientStreamRPC(Demo_ClientStreamRPCServer) error
	// 双向流模式
	BiStreamRPC(Demo_BiStreamRPCServer) error
	mustEmbedUnimplementedDemoServer()
}

// UnimplementedDemoServer must be embedded to have forward compatible implementations.
type UnimplementedDemoServer struct {
}

func (UnimplementedDemoServer) UnaryRPC(context.Context, *DemoRequest) (*DemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryRPC not implemented")
}
func (UnimplementedDemoServer) ServerStreamRPC(*DemoRequest, Demo_ServerStreamRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamRPC not implemented")
}
func (UnimplementedDemoServer) ClientStreamRPC(Demo_ClientStreamRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamRPC not implemented")
}
func (UnimplementedDemoServer) BiStreamRPC(Demo_BiStreamRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method BiStreamRPC not implemented")
}
func (UnimplementedDemoServer) mustEmbedUnimplementedDemoServer() {}

// UnsafeDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoServer will
// result in compilation errors.
type UnsafeDemoServer interface {
	mustEmbedUnimplementedDemoServer()
}

func RegisterDemoServer(s grpc.ServiceRegistrar, srv DemoServer) {
	s.RegisterService(&Demo_ServiceDesc, srv)
}

func _Demo_UnaryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).UnaryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Demo/UnaryRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).UnaryRPC(ctx, req.(*DemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_ServerStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DemoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServer).ServerStreamRPC(m, &demoServerStreamRPCServer{stream})
}

type Demo_ServerStreamRPCServer interface {
	Send(*DemoResponse) error
	grpc.ServerStream
}

type demoServerStreamRPCServer struct {
	grpc.ServerStream
}

func (x *demoServerStreamRPCServer) Send(m *DemoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Demo_ClientStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServer).ClientStreamRPC(&demoClientStreamRPCServer{stream})
}

type Demo_ClientStreamRPCServer interface {
	SendAndClose(*DemoResponse) error
	Recv() (*DemoRequest, error)
	grpc.ServerStream
}

type demoClientStreamRPCServer struct {
	grpc.ServerStream
}

func (x *demoClientStreamRPCServer) SendAndClose(m *DemoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoClientStreamRPCServer) Recv() (*DemoRequest, error) {
	m := new(DemoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Demo_BiStreamRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServer).BiStreamRPC(&demoBiStreamRPCServer{stream})
}

type Demo_BiStreamRPCServer interface {
	Send(*DemoResponse) error
	Recv() (*DemoRequest, error)
	grpc.ServerStream
}

type demoBiStreamRPCServer struct {
	grpc.ServerStream
}

func (x *demoBiStreamRPCServer) Send(m *DemoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoBiStreamRPCServer) Recv() (*DemoRequest, error) {
	m := new(DemoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Demo_ServiceDesc is the grpc.ServiceDesc for Demo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Demo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryRPC",
			Handler:    _Demo_UnaryRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamRPC",
			Handler:       _Demo_ServerStreamRPC_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamRPC",
			Handler:       _Demo_ClientStreamRPC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BiStreamRPC",
			Handler:       _Demo_BiStreamRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/four_methods.proto",
}
